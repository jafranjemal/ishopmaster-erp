const mongoose = require("mongoose");

/**
 * Defines a single line item on the final supplier invoice.
 * Captures the final financial reality of what is being billed.
 */
const invoiceItemSchema = new mongoose.Schema(
  {
    productVariantId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "ProductVariant",
      required: true,
    },
    description: { type: String, required: true },
    quantityBilled: { type: Number, required: true, min: 0 },
    // The final cost per item as stated on the supplier's invoice.
    finalCostPrice: { type: Number, required: true },
    totalCost: { type: Number, required: true },
  },
  { _id: false }
);

/**
 * Defines the Supplier Invoice document. This represents the final bill
 * from a supplier and is the source of truth for Accounts Payable.
 */
const supplierInvoiceSchema = new mongoose.Schema(
  {
    invoiceId: {
      // A user-friendly, sequential ID generated by our system
      type: String,
      required: true,
      unique: true,
    },
    supplierInvoiceNumber: {
      // The number from the supplier's physical paper invoice
      type: String,
      required: [true, "Supplier's invoice number is required."],
      trim: true,
    },
    supplierId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Supplier",
      required: true,
    },

    // An array of GRNs that this single invoice covers.
    goodsReceiptNoteIds: [
      { type: mongoose.Schema.Types.ObjectId, ref: "GoodsReceiptNote" },
    ],

    status: {
      type: String,
      required: true,
      enum: ["pending_payment", "partially_paid", "fully_paid", "cancelled"],
      default: "pending_payment",
    },
    items: [invoiceItemSchema],

    // Financials from the supplier's bill
    subTotal: { type: Number, required: true },
    taxes: { type: Number, default: 0 },
    totalAmount: { type: Number, required: true },

    // Multi-Currency Fields from the original PO
    transactionCurrency: { type: String, required: true },
    exchangeRateToBase: { type: Number, required: true },

    invoiceDate: { type: Date, required: true },
    dueDate: { type: Date },

    notes: { type: String, trim: true },

    // For storing scans of the physical invoice document
    fileAttachments: [
      {
        name: { type: String, required: true },
        url: { type: String, required: true },
      },
    ],

    postedBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  },
  { timestamps: true }
);

// Pre-save hook to generate a sequential, user-friendly ID.
supplierInvoiceSchema.pre("validate", async function (next) {
  if (this.isNew) {
    const lastInvoice = await this.constructor
      .findOne()
      .sort({ createdAt: -1 });
    let lastNumber = 0;
    if (lastInvoice && lastInvoice.invoiceId) {
      lastNumber = parseInt(lastInvoice.invoiceId.split("-")[1]);
    }
    this.invoiceId = "BILL-" + String(lastNumber + 1).padStart(6, "0");
  }
  next();
});

module.exports = supplierInvoiceSchema;
